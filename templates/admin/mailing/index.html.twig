{% extends '@EasyAdmin/page/content.html.twig' %}

{% block page_title %}E-Mail Versand{% endblock %}

{% block content_title %}E-Mail Versand{% endblock %}

{% block main %}
    <div class="card">
        <div class="card-header">
            <h5 class="card-title">E-Mail an Teilnehmer versenden</h5>
        </div>
        <div class="card-body">
            {% for label, messages in app.flashes %}
                {% for message in messages %}
                    <div class="alert alert-{{ label }}">
                        {{ message }}
                    </div>
                {% endfor %}
            {% endfor %}
            
            <form method="post" action="{{ path('admin_mailing_send') }}">
                <div class="form-group mb-3">
                    <label for="recipient_type">Empfänger</label>
                    <select class="form-control" id="recipient_type" name="recipient_type" required>
                        <option value="">-- Bitte wählen --</option>
                        <option value="individual">Einzelner Empfänger</option>
                        <option value="custom_email">Freie E-Mail-Adresse</option>
                        <option value="mitarbeiter">Alle Mitarbeiter</option>
                        <option value="active">Alle aktiven Anmeldungen</option>
                    </select>
                </div>
                
                <div class="form-group mb-3" id="individual-recipient-container" style="display: none;">
                    <label for="individual_recipient">Einzelner Empfänger</label>
                    <select class="form-control" id="individual_recipient" name="individual_recipient">
                        <option value="">-- Bitte wählen --</option>
                        {% for anmeldung in anmeldungen %}
                            <option value="{{ anmeldung.id }}">
                                {{ anmeldung.firstname }} {{ anmeldung.lastname }}
                                ({{ anmeldung.personenTyp.value }}, {{ anmeldung.status.value }})
                            </option>
                        {% endfor %}
                    </select>
                </div>
                
                <div class="form-group mb-3" id="custom-email-container" style="display: none;">
                    <label for="custom_email">E-Mail-Adresse</label>
                    <input type="email" class="form-control" id="custom_email" name="custom_email" placeholder="beispiel@domain.de">
                </div>
                
                <div class="form-group mb-3">
                    <label for="subject">Betreff</label>
                    <input type="text" class="form-control" id="subject" name="subject" required value="{{ subject }}">
                </div>
                
                <div class="form-group mb-3">
                    <label for="content">Inhalt</label>
                    <div id="editor" style="height: 300px;"></div>
                    <input type="hidden" name="content" id="content-input">
                    <small>Du kannst die Platzhalter (vorname) und (nachname) verwenden. Diese werden individuell durch die Inhalte der Anmeldung ersetzt.</small>
                </div>
                
                <div class="form-group mb-3">
                    <label>Dateianhänge</label>
                    <div class="file-upload-container">
                        <div class="input-group mb-3">
                            <input type="file" class="form-control" id="file-upload" aria-describedby="file-upload-button">
                            <button class="btn btn-outline-secondary" type="button" id="file-upload-button">Hochladen</button>
                        </div>
                        <div id="upload-progress" class="progress mb-3" style="display: none;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                        </div>
                        <div id="attachments-container" class="mb-3">
                            <div class="alert alert-info" id="no-attachments-message">
                                Keine Dateianhänge vorhanden
                            </div>
                            <div id="attachments-list" class="list-group">
                                <!-- Attachments will be listed here -->
                            </div>
                            <div id="selected-attachments" class="mt-3" style="display:none;">
                                <h6>Ausgewählte Anhänge</h6>
                                <div id="selected-attachments-list" class="mb-2">
                                    <div class="alert alert-info" id="no-selected-attachments-message">
                                        Keine Anhänge ausgewählt
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary">E-Mail versenden</button>
                    <button type="button" id="test-email-btn" class="btn btn-secondary">Test E-Mail senden</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Test Email Modal -->
    <div class="modal fade" id="testEmailModal" tabindex="-1" aria-labelledby="testEmailModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="testEmailModalLabel">Test E-Mail senden</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="test_email_address">E-Mail-Adresse für den Test</label>
                        <input type="email" class="form-control" id="test_email_address" required placeholder="beispiel@domain.de">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abbrechen</button>
                    <button type="button" class="btn btn-primary" id="send-test-email-btn">Test E-Mail senden</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block body_javascript %}
    {{ parent() }}
    
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var quill = new Quill('#editor', {
                theme: 'snow',
                modules: {
                    toolbar: [
                        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                        ['bold', 'italic', 'underline', 'strike'],
                        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                        [{ 'color': [] }, { 'background': [] }],
                        ['link'],
                        ['clean']
                    ]
                }
            });
            
            var form = document.querySelector('form');
            form.onsubmit = function() {
                var contentInput = document.querySelector('#content-input');
                contentInput.value = quill.root.innerHTML;
                return true;
            };
            
            // File upload functionality
            const fileUploadButton = document.getElementById('file-upload-button');
            const fileUploadInput = document.getElementById('file-upload');
            const uploadProgress = document.getElementById('upload-progress');
            const progressBar = uploadProgress.querySelector('.progress-bar');
            const attachmentsList = document.getElementById('attachments-list');
            const noAttachmentsMessage = document.getElementById('no-attachments-message');
            
            // Load existing attachments
            loadAttachments();
            
            function loadAttachments() {
                fetch('{{ path('admin_mailing_attachments') }}')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.attachments.length > 0) {
                            noAttachmentsMessage.style.display = 'none';
                            renderAttachments(data.attachments);
                        } else {
                            noAttachmentsMessage.style.display = 'block';
                            attachmentsList.innerHTML = '';
                        }
                    })
                    .catch(error => {
                        console.error('Error loading attachments:', error);
                    });
            }
            
            function renderAttachments(attachments) {
                attachmentsList.innerHTML = '';
                
                attachments.forEach(attachment => {
                    const item = document.createElement('div');
                    item.className = 'list-group-item d-flex justify-content-between align-items-center';
                    
                    const fileInfo = document.createElement('div');
                    
                    fileInfo.innerHTML = `
                        <div class="form-check">
                            <input class="form-check-input attachment-checkbox" type="checkbox" value="${attachment.uuid}" id="attachment-${attachment.uuid}" name="attachments[]">

                            <label class="form-check-label" for="attachment-${attachment.uuid}">
                                <strong>${attachment.filename}</strong>
                                <small class="d-block text-muted">Hochgeladen am: ${attachment.createdAt}</small>
                            </label>
                        </div>
                    `;
                    
                    const actions = document.createElement('div');
                    

                    const openButton = document.createElement('a');
                    openButton.href = attachment.url;
                    openButton.target = "_blank"
                    openButton.className = 'btn btn-sm btn-info me-2';
                    openButton.textContent = 'Öffnen';
                    
                    actions.appendChild(openButton);                    
                    const insertButton = document.createElement('button');
                    insertButton.type = "button";
                    insertButton.className = 'btn btn-sm btn-primary me-2';
                    insertButton.textContent = 'In E-Mail einfügen';
                    insertButton.addEventListener('click', function() {
                        insertAttachmentLink(attachment);
                    });
                    
                    actions.appendChild(insertButton);
                    
                    item.appendChild(fileInfo);
                    item.appendChild(actions);
                    attachmentsList.appendChild(item);
                    
                    // Add event listener for checkbox
                    const checkbox = item.querySelector(`#attachment-${attachment.uuid}`);
                    checkbox.addEventListener('change', function() {
                        updateSelectedAttachments();
                    });
                });
            }
            
            function updateSelectedAttachments() {
                const selectedAttachmentsList = document.getElementById('selected-attachments-list');
                const noSelectedAttachmentsMessage = document.getElementById('no-selected-attachments-message');
                const checkboxes = document.querySelectorAll('.attachment-checkbox:checked');
                
                if (checkboxes.length === 0) {
                    noSelectedAttachmentsMessage.style.display = 'block';
                    selectedAttachmentsList.innerHTML = '';
                    return;
                }
                
                noSelectedAttachmentsMessage.style.display = 'none';
                selectedAttachmentsList.innerHTML = '';
                
                checkboxes.forEach(checkbox => {
                    const attachmentId = checkbox.value;
                    const attachmentLabel = checkbox.closest('.form-check').querySelector('label').textContent.trim();
                    
                    const badge = document.createElement('span');
                    badge.className = 'badge bg-primary me-2 mb-2';
                    badge.textContent = attachmentLabel.split('\n')[0]; // Get just the filename
                    
                    selectedAttachmentsList.appendChild(badge);
                });
            }
            
            function insertAttachmentLink(attachment) {
                // Get current cursor position
                const range = quill.getSelection(true);
                
                const checkbox = document.querySelector(`#attachment-${attachment.uuid}`);
                checkbox.checked = true;

                // Insert URL as a link at cursor position
                quill.insertText(range.index, 'Dateianhang: ', 'bold');
                quill.insertText(range.index + 13, attachment.filename, 'link', attachment.url);
                
                // Focus back on editor
                quill.focus();


            }
            
            fileUploadButton.addEventListener('click', function() {
                if (!fileUploadInput.files.length) {
                    alert('Bitte wählen Sie zuerst eine Datei aus.');
                    return;
                }
                
                const formData = new FormData();
                formData.append('file', fileUploadInput.files[0]);
                
                // Show loading state
                fileUploadButton.disabled = true;
                uploadProgress.style.display = 'block';
                progressBar.style.width = '0%';
                
                const xhr = new XMLHttpRequest();
                
                xhr.upload.addEventListener('progress', function(e) {
                    if (e.lengthComputable) {
                        const percentComplete = (e.loaded / e.total) * 100;
                        progressBar.style.width = percentComplete + '%';
                    }
                });
                
                xhr.addEventListener('load', function() {
                    fileUploadButton.disabled = false;
                    uploadProgress.style.display = 'none';
                    fileUploadInput.value = '';
                    
                    if (xhr.status === 200) {
                        const response = JSON.parse(xhr.responseText);
                        if (response.success) {
                            // Reload attachments list
                            loadAttachments();
                        } else {
                            alert('Fehler beim Hochladen: ' + (response.error || 'Unbekannter Fehler'));
                        }
                    } else {
                        alert('Fehler beim Hochladen: ' + xhr.statusText);
                    }
                });
                
                xhr.addEventListener('error', function() {
                    fileUploadButton.disabled = false;
                    uploadProgress.style.display = 'none';
                    alert('Fehler beim Hochladen. Bitte versuchen Sie es erneut.');
                });
                
                xhr.open('POST', '{{ path('admin_mailing_upload') }}', true);
                xhr.send(formData);
            });
            // Show/hide recipient fields based on selected recipient type
            var recipientTypeSelect = document.querySelector('#recipient_type');
            var individualRecipientContainer = document.querySelector('#individual-recipient-container');
            var customEmailContainer = document.querySelector('#custom-email-container');
            
            recipientTypeSelect.addEventListener('change', function() {
                // Hide all containers first
                individualRecipientContainer.style.display = 'none';
                customEmailContainer.style.display = 'none';
                
                // Remove required attributes
                document.querySelector('#individual_recipient').removeAttribute('required');
                document.querySelector('#custom_email').removeAttribute('required');
                
                // Show the appropriate container based on selection
                if (this.value === 'individual') {
                    individualRecipientContainer.style.display = 'block';
                    document.querySelector('#individual_recipient').setAttribute('required', 'required');
                } else if (this.value === 'custom_email') {
                    customEmailContainer.style.display = 'block';
                    document.querySelector('#custom_email').setAttribute('required', 'required');
                }
            });
            
            // Test Email functionality
            const testEmailBtn = document.getElementById('test-email-btn');
            const testEmailModal = new bootstrap.Modal(document.getElementById('testEmailModal'));
            const sendTestEmailBtn = document.getElementById('send-test-email-btn');
            
            testEmailBtn.addEventListener('click', function() {
                // Validate form fields before showing the modal
                const subject = document.getElementById('subject').value;
                const editorContent = quill.root.innerHTML;
                
                if (!subject || !editorContent) {
                    alert('Bitte füllen Sie Betreff und Inhalt aus, bevor Sie eine Test-E-Mail senden.');
                    return;
                }
                
                testEmailModal.show();
            });
            
            sendTestEmailBtn.addEventListener('click', function() {
                const testEmailAddress = document.getElementById('test_email_address').value;
                
                if (!testEmailAddress) {
                    alert('Bitte geben Sie eine E-Mail-Adresse für den Test ein.');
                    return;
                }
                
                // Get form data
                const subject = document.getElementById('subject').value;
                const content = quill.root.innerHTML;
                
                // Get selected attachments
                const selectedAttachments = [];
                document.querySelectorAll('.attachment-checkbox:checked').forEach(checkbox => {
                    selectedAttachments.push(checkbox.value);
                });
                
                // Create form data
                const formData = new FormData();
                formData.append('subject', subject);
                formData.append('content', content);
                formData.append('test_email', testEmailAddress);
                selectedAttachments.forEach(attachment => {
                    formData.append('attachments[]', attachment);
                });
                
                // Show loading state
                sendTestEmailBtn.disabled = true;
                sendTestEmailBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Senden...';
                
                // Send test email
                fetch('{{ path('admin_mailing_test') }}', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    sendTestEmailBtn.disabled = false;
                    sendTestEmailBtn.textContent = 'Test E-Mail senden';
                    
                    if (data.success) {
                        testEmailModal.hide();
                        alert('Test-E-Mail wurde erfolgreich an ' + testEmailAddress + ' gesendet.');
                    } else {
                        alert('Fehler beim Senden der Test-E-Mail: ' + (data.error || 'Unbekannter Fehler'));
                    }
                })
                .catch(error => {
                    sendTestEmailBtn.disabled = false;
                    sendTestEmailBtn.textContent = 'Test E-Mail senden';
                    alert('Fehler beim Senden der Test-E-Mail. Bitte versuchen Sie es erneut.');
                    console.error('Error sending test email:', error);
                });
            });
        });
    </script>
{% endblock %}